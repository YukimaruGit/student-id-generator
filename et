[1mdiff --git a/-H b/-H[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/-X b/-X[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/-d b/-d[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/public/assets/js/app.js b/public/assets/js/app.js[m
[1mindex a6ec3bc..aa04a48 100644[m
[1m--- a/public/assets/js/app.js[m
[1m+++ b/public/assets/js/app.js[m
[36m@@ -90,56 +90,74 @@[m [mfunction generateShareUrl(imageUrl, studentInfo = {}) {[m
 }[m
 [m
 function downloadCanvasAsImage(canvas, filename = '学生証.png') {[m
[31m-  try {[m
[31m-    // iOS対応: toBlob方式で確実に保存[m
[31m-    canvas.toBlob(async (blob) => {[m
[31m-      if (blob) {[m
[31m-        const url = URL.createObjectURL(blob);[m
[31m-        [m
[31m-        // iOS: まずはネイティブ共有を試す[m
[31m-        if (window.tryNativeShare) {[m
[31m-          try {[m
[31m-            const file = new File([blob], filename, { type: 'image/png' });[m
[31m-            const shared = await window.tryNativeShare(file, '学生証を作成しました');[m
[31m-            if (shared) {[m
[31m-              URL.revokeObjectURL(url);[m
[31m-              return;[m
[31m-            }[m
[31m-          } catch (e) {[m
[31m-            console.log('ネイティブ共有に失敗、通常ダウンロードにフォールバック');[m
[31m-          }[m
[31m-        }[m
[31m-        [m
[31m-        // 通常ダウンロード（iOS 15+はdownload動作、旧端末は新規タブ→長押し保存）[m
[31m-        const link = document.createElement('a');[m
[31m-        link.download = filename;[m
[31m-        link.href = url;[m
[31m-        document.body.appendChild(link);[m
[31m-        link.click();[m
[31m-        link.remove();[m
[31m-        setTimeout(() => URL.revokeObjectURL(url), 1000);[m
[31m-      } else {[m
[31m-        alert('画像の生成に失敗しました。もう一度お試しください。');[m
[32m+[m[32m  const isIOS = /iP(hone|ad|od)/.test(navigator.platform) ||[m
[32m+[m[32m                (/Macintosh/.test(navigator.userAgent) && 'ontouchend' in document);[m
[32m+[m
[32m+[m[32m  canvas.toBlob(async (blob) => {[m
[32m+[m[32m    if (!blob) {[m
[32m+[m[32m      // 最終フォールバック：表示→長押し保存[m
[32m+[m[32m      try {[m
[32m+[m[32m        const dataUrl = canvas.toDataURL('image/png', 0.92);[m
[32m+[m[32m        window.location.href = dataUrl;[m
[32m+[m[32m      } catch (_) {}[m
[32m+[m[32m      return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // 1) まずはシェア（保存も選べる）[m
[32m+[m[32m    try {[m
[32m+[m[32m      const file = new File([blob], filename, { type: 'image/png' });[m
[32m+[m[32m      if (navigator.canShare && navigator.canShare({ files: [file] })) {[m
[32m+[m[32m        await navigator.share({ files: [file], text: '学生証を保存' });[m
[32m+[m[32m        return;[m
       }[m
[31m-    }, 'image/png', 0.9);[m
[31m-  } catch (error) {[m
[31m-    console.error('Canvas download failed:', error);[m
[31m-    alert('ダウンロードに失敗しました。もう一度お試しください。');[m
[31m-  }[m
[32m+[m[32m    } catch (_) { /* ユーザーキャンセル含む */ }[m
[32m+[m
[32m+[m[32m    // 2) Blob URL + a.click（iOSはdownload無視→新規タブで画像表示）[m
[32m+[m[32m    const url = URL.createObjectURL(blob);[m
[32m+[m[32m    const a = document.createElement('a');[m
[32m+[m[32m    a.href = url;[m
[32m+[m[32m    if (!isIOS) a.download = filename;[m
[32m+[m[32m    a.target = '_blank';[m
[32m+[m[32m    a.rel = 'noopener';[m
[32m+[m[32m    document.body.appendChild(a);[m
[32m+[m[32m    a.click();[m
[32m+[m[32m    a.remove();[m
[32m+[m[32m    setTimeout(() => URL.revokeObjectURL(url), 2000);[m
[32m+[m[32m  }, 'image/png', 0.92);[m
 }[m
 [m
 function generateTwitterShareUrl(shareUrl, text = '放課後クロニクル 学生証を作成しました！') {[m
   return `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(shareUrl)}`;[m
 }[m
 [m
[31m-async function copyUrlToClipboard(url) {[m
[32m+[m[32masync function copyUrlToClipboard(text){[m
[32m+[m[32m  // 1) 標準API（トップレベル & HTTPS）[m
   try {[m
[31m-    await navigator.clipboard.writeText(url);[m
[31m-    return true;[m
[31m-  } catch (err) {[m
[31m-    console.error('Failed to copy URL:', err);[m
[31m-    return false;[m
[31m-  }[m
[32m+[m[32m    const topLevel = (window.top === window.self);[m
[32m+[m[32m    if (navigator.clipboard && window.isSecureContext && topLevel) {[m
[32m+[m[32m      await navigator.clipboard.writeText(text);[m
[32m+[m[32m      return true;[m
[32m+[m[32m    }[m
[32m+[m[32m  } catch(_) {}[m
[32m+[m
[32m+[m[32m  // 2) execCommand フォールバック[m
[32m+[m[32m  try {[m
[32m+[m[32m    const ta = document.createElement('textarea');[m
[32m+[m[32m    ta.value = text;[m
[32m+[m[32m    ta.style.position = 'fixed';[m
[32m+[m[32m    ta.style.left = '-99999px';[m
[32m+[m[32m    ta.style.top = '-99999px';[m
[32m+[m[32m    document.body.appendChild(ta);[m
[32m+[m[32m    ta.focus();[m
[32m+[m[32m    ta.select();[m
[32m+[m[32m    const ok = document.execCommand('copy');[m
[32m+[m[32m    document.body.removeChild(ta);[m
[32m+[m[32m    if (ok) return true;[m
[32m+[m[32m  } catch(_) {}[m
[32m+[m
[32m+[m[32m  // 3) 埋め込み環境など → 最終手段：アラートで見せる（UIは既存のまま）[m
[32m+[m[32m  alert('URLをコピーできない環境です。下記のURLを長押しでコピーしてください：\n\n' + text);[m
[32m+[m[32m  return false;[m
 }[m
 [m
 // iOS対応: 堅牢なコピー機能（clipboard → execCommand の二段構え）[m
[1mdiff --git a/public/generator.html b/public/generator.html[m
[1mindex 22f5a22..c76aaa9 100644[m
[1m--- a/public/generator.html[m
[1m+++ b/public/generator.html[m
[36m@@ -292,16 +292,19 @@[m
     const SHARE_BASE = 'https://student-id-generator.pages.dev'; // Cloudflare PagesのProduction domain[m
     // 後で独自ドメイン化する場合: https://ogp.<your-domain> に変更可能[m
     [m
[31m-    // Base64URL変換ユーティリティ[m
[31m-    function toBase64Url(str){[m
[31m-      return btoa(unescape(encodeURIComponent(str)))[m
[31m-        .replace(/\+/g,'-').replace(/\//g,'_').replace(/=+$/,'');[m
[31m-    }[m
[31m-    [m
[31m-    // Cloudinary へ保存完了後の処理に追加：public_idから共有URLを作る[m
[32m+[m[32m    // 置き換え：public_id -> share-preview.html?image=...&name=...[m
     function buildShareUrl(public_id){[m
[31m-      const slug = toBase64Url(public_id) + '-' + Date.now();[m
[31m-      return `${SHARE_BASE}/s/${slug}`;[m
[32m+[m[32m      // Cloudinary 変換URL（OGP用 1200x630）[m
[32m+[m[32m      const cloudName = (window.cloudinaryConfig && window.cloudinaryConfig.cloudName) || 'di5xqlddy';[m
[32m+[m[32m      const cld = `https://res.cloudinary.com/${cloudName}/image/upload/` +[m
[32m+[m[32m                  `f_auto,q_auto,w_1200,h_630,c_fill,fl_force_strip/` +[m
[32m+[m[32m                  `${encodeURIComponent(public_id)}.png`;[m
[32m+[m
[32m+[m[32m      const u = new URL('/share-preview.html', SHARE_BASE);[m
[32m+[m[32m      const name = document.getElementById('nameJa')?.value?.trim() || '';[m
[32m+[m[32m      u.searchParams.set('image', cld);[m
[32m+[m[32m      if (name) u.searchParams.set('name', name);[m
[32m+[m[32m      return u.toString();[m
     }[m
     [m
     // グローバル関数として公開（app.jsから呼び出し可能）[m
[36m@@ -335,6 +338,37 @@[m
       // 非対応なら通常のX intent（上記 updateShareLinks 済み）へ誘導[m
       return false;[m
     }[m
[32m+[m[41m    [m
[32m+[m[32m    // X共有リンクの安定化（アプリ起動は可能なときのみ）[m
[32m+[m[32m    (function reinforceXShare(){[m
[32m+[m[32m      const btn = document.getElementById('btnShareX');[m
[32m+[m[32m      if (!btn) return;[m
[32m+[m
[32m+[m[32m      // 既存の href は Intent（https://x.com/intent/post?...）が入っている前提[m
[32m+[m[32m      const intentUrl = btn.getAttribute('href');[m
[32m+[m
[32m+[m[32m      btn.addEventListener('click', function(e){[m
[32m+[m[32m        // iframe（埋め込み）では Intent のみ[m
[32m+[m[32m        if (window.top !== window.self) {[m
[32m+[m[32m          // 既存hrefをそのまま新規タブで開く（target, relは既に設定済み）[m
[32m+[m[32m          return; // 既定動作に任せる[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // トップレベルならアプリスキーム→失敗時Intent[m
[32m+[m[32m        e.preventDefault();[m
[32m+[m[32m        const text = new URL(intentUrl).searchParams.get('text') || '';[m
[32m+[m[32m        const url  = new URL(intentUrl).searchParams.get('url')  || '';[m
[32m+[m[32m        const scheme = `twitter://post?message=${encodeURIComponent(`${text} ${url}`)}`;[m
[32m+[m
[32m+[m[32m        let fallback = setTimeout(()=> {[m
[32m+[m[32m          window.open(intentUrl, '_blank', 'noopener');[m
[32m+[m[32m        }, 800);[m
[32m+[m
[32m+[m[32m        // アプリ起動試行（iOSで失敗しても fallback が走る）[m
[32m+[m[32m        try { window.location.href = scheme; } catch(_) {}[m
[32m+[m[32m        // ユーザー操作で来ているのでポップアップブロックは起きにくい[m
[32m+[m[32m      }, {passive:true});[m
[32m+[m[32m    })();[m
   </script>[m
 </head>[m
 <body>[m
[36m@@ -701,6 +735,11 @@[m
   <!-- 埋め込みモード対応 -->[m
   <script src="assets/js/embed-mode.js" defer></script>[m
   [m
[32m+[m[32m  <!-- iPhoneでカメラが起動する件を修正 -->[m
[32m+[m[32m  <script>[m
[32m+[m[32m    document.getElementById('photoInput')?.removeAttribute('capture');[m
[32m+[m[32m  </script>[m
[32m+[m[41m  [m
   <script>[m
 (function() {[m
   'use strict';[m
